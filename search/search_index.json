{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lyzer \ud83c\udfce\ufe0f\ud83d\udcca","text":"<p>A Formula 1 Data Analysis Tool (Work in Progress)</p> <p>Lyzer is a passion project aimed at bringing Formula 1 enthusiasts closer to the data. While still in its early stages, Lyzer is designed to analyze and compare Formula 1 statistics, providing insights for fans, analysts, and data enthusiasts alike.  </p>"},{"location":"#current-status","title":"\ud83d\udea7 Current Status","text":"<p>This project is under active development and is not yet production-ready. Lyzer combines a dedicated C# backend with a React frontend to build a fast and flexible tool for exploring the world of Formula 1 data.  </p>"},{"location":"#features-planned","title":"\ud83c\udfaf Features (Planned)","text":"<p>Although it's early days, here\u2019s what Lyzer might offer in the future: - Analysis of Formula 1 races, teams, and drivers. - Comparison of statistics across seasons, races, and drivers. - Visualization tools for making sense of the data.  </p>"},{"location":"#why-lyzer","title":"\ud83d\udca1 Why Lyzer?","text":"<p>\"Lyzer\" (from analyzer or analyzing) reflects the essence of what we aim to achieve\u2014diving deep into the numbers and uncovering insights for Formula 1 fans.  </p>"},{"location":"#tech-stack","title":"\u2699\ufe0f Tech Stack","text":"<ul> <li>Caching: Redis</li> <li>Backend: C#, ASP.NET Core</li> <li>Frontend: React, Typescript, Vite</li> </ul>"},{"location":"#contributing","title":"\ud83c\udf1f Contributing","text":"<p>As Lyzer evolves, we welcome ideas, feedback, and contributions from the community. Feel free to open an issue or submit a pull request to help shape the project\u2019s future.  </p>"},{"location":"#future-goals","title":"\ud83d\ude80 Future Goals","text":"<p>Lyzer is a hobby project with the aspiration of one day going live. While we\u2019re taking it step by step, our goal is to build something useful, engaging, and impactful for the Formula 1 community.  </p>"},{"location":"architecture/overview/","title":"High-Level Architecture Overview","text":"<p>Note: This project is under active development, so the architecture is subject to change.</p>"},{"location":"architecture/overview/#components","title":"Components","text":"<ul> <li>Jolpica F1 API</li> <li>Redis</li> <li>Lyzer API<ul> <li>C#</li> <li>ASP.NET</li> </ul> </li> <li>Lyzer Frontend<ul> <li>React</li> <li>Typescript</li> <li>Vite</li> </ul> </li> </ul>"},{"location":"architecture/overview/#jolpica-f1-api","title":"Jolpica F1 API","text":"<p>The Jolpica F1 API, a successor to the Ergast F1 API, can be found here. This is currently the primary data source for all F1 data provided by Lyzer.</p>"},{"location":"architecture/overview/#redis","title":"Redis","text":"<p>We use Redis to cache data for the current year instead of storing it in a more permanent location, as this data is subject to change. Examples of cached data include:</p> <ul> <li>Driver Standings</li> <li>Constructor Standings</li> <li>Races for the season</li> </ul>"},{"location":"architecture/overview/#lyzer-api","title":"Lyzer API","text":"<p>The Lyzer API is a C#, ASP.NET powered backend. Its main roles are:</p> <ul> <li>Providing Formula 1 data for the current year such as:<ul> <li>Driver Standings</li> <li>Constructor Standings</li> <li>Races</li> <li>Results</li> </ul> </li> <li>Providing a RESTful API for the Lyzer Frontend</li> </ul>"},{"location":"architecture/overview/#lyzer-frontend","title":"Lyzer Frontend","text":"<p>The Lyzer Frontend is a React, Typescript, and Vite powered frontend. It is responsible for:</p> <ul> <li>Displaying Formula 1 data in a user-friendly manner</li> <li>Providing a way to interact with the Formula 1 data</li> <li>Providing a way to interact with the Lyzer API</li> </ul>"},{"location":"architecture/overview/#diagram","title":"Diagram","text":""},{"location":"architecture/backend/caching/","title":"How We Utilize Redis for Caching","text":"<p>We use Redis as a caching solution for F1 data that is subject to change and based on the current year.</p> <p>To keep things simple, we use fixed time-to-live (TTL) caching, which may vary depending on the data being cached.</p>"},{"location":"architecture/backend/caching/#ttl-cache-for-different-datasets","title":"TTL Cache for Different Datasets","text":"<ul> <li>Races/Schedules: 24-hour TTL</li> <li>Driver Standings: 1-hour TTL</li> <li>Constructor Standings: 1-hour TTL</li> <li>Race Results: 1-hour TTL</li> </ul>"},{"location":"architecture/backend/caching/#how-we-retrieve-and-store-cached-data","title":"How We Retrieve and Store Cached Data","text":"<p>Currently, the data stored in the cache are JSON strings. These strings are serialized on the API side when setting the cache and deserialized when retrieving it.</p> <p>Below you can find an example on how we serialize/deserialize those values with C# using the CacheService we have implemented in the codebase:</p> <pre><code>public async Task&lt;DriverStandingsDTO&gt; GetCurrentDriverStandings()\n{\n    string key = String.Format(CacheKeyConstants.DriverStandings, \"current\");\n    string? result = await _cache.Get(key);\n\n    if (result == null)\n    {\n        DriverStandingsDTO standings = await _client.GetCurrentDriverStandings();\n        await _cache.Add(key, JsonConvert.SerializeObject(standings), TimeSpan.FromHours(1));\n        return standings;\n    }\n\n    return JsonConvert.DeserializeObject&lt;DriverStandingsDTO&gt;(result) ?? new DriverStandingsDTO();\n}\n</code></pre>"},{"location":"architecture/backend/overview/","title":"General Structure of the API/Backend","text":"<p>The primary components to be aware of in the backend are:</p> <ul> <li>Controllers</li> <li>Services</li> <li>Clients</li> <li>Repositories</li> </ul> <p>There are also other components that play a less pivotal role but still form part of the project, such as:</p> <ul> <li>Constants</li> <li>DTOs</li> <li>Middleware</li> <li>Errors</li> </ul>"},{"location":"architecture/backend/overview/#controllers","title":"Controllers","text":"<p>The controllers are the entry point to the API from a consumer perspective. This is where endpoints are declared and exposed to the consumer.</p> <p>They are primarily responsible for routing and should be as simple as possible. They call the relevant services to handle business logic, data retrieval, etc.</p> <p>An example of a controller is shown below:</p> <pre><code>using Lyzer.Common.DTO;\nusing Lyzer.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Text.Json;\n\nnamespace Lyzer.Controllers\n{\n    [ApiController]\n    [Route(\"/api/v1/drivers\")]\n    public class DriverController : ControllerBase\n    {\n        private readonly ILogger&lt;DriverController&gt; _logger;\n        private readonly DriverService _driverService;\n\n        public DriverController(ILogger&lt;DriverController&gt; logger, DriverService driverService)\n        {\n            _logger = logger;\n            _driverService = driverService;\n        }\n\n        [HttpGet(\"standings\", Name = \"Get driver standings\")]\n        public async Task&lt;ActionResult&lt;DriverStandingsDTO&gt;&gt; GetCurrentDriverStandings()\n        {\n            return await _driverService.GetCurrentDriverStandings();\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/backend/overview/#services","title":"Services","text":"<p>The services are likely the more complex and sophisticated pieces of the codebase, as this is where the heavy lifting occurs.</p> <p>Services are responsible for handling all business logic, transformation, and calling the relevant data retrieval methods/functionality.</p> <p>An example of a service is shown below:</p> <pre><code>using Lyzer.Clients;\nusing Lyzer.Common.Constants;\nusing Lyzer.Common.DTO;\nusing Newtonsoft.Json;\n\nnamespace Lyzer.Services\n{\n    public class DriverService\n    {\n        private readonly ILogger&lt;DriverService&gt; _logger;\n        private readonly JolpicaClient _client;\n        private readonly CacheService _cache;\n\n        public DriverService(ILogger&lt;DriverService&gt; logger, JolpicaClient client, CacheService cache)\n        {\n            _logger = logger;\n            _client = client;\n            _cache = cache;\n        }\n\n        public async Task&lt;DriverStandingsDTO&gt; GetCurrentDriverStandings()\n        {\n            string key = String.Format(CacheKeyConstants.DriverStandings, \"current\");\n            string? result = await _cache.Get(key);\n\n            if (result == null)\n            {\n                DriverStandingsDTO standings = await _client.GetCurrentDriverStandings();\n                await _cache.Add(key, JsonConvert.SerializeObject(standings), TimeSpan.FromHours(1));\n                return standings;\n            }\n\n            return JsonConvert.DeserializeObject&lt;DriverStandingsDTO&gt;(result) ?? new DriverStandingsDTO();\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/backend/overview/#clients","title":"Clients","text":"<p>Clients are responsible for communicating with other APIs. In the case of Lyzer, an example is a client to query Jolpica F1 data.</p> <p>Clients should perform minimal work, keeping everything as simple as possible, and focus primarily on communication with APIs. They should not perform transformations or similar tasks.</p> <p>An example implementation is shown below:</p> <pre><code>using System.Runtime.Serialization;\nusing System.Text.Json;\nusing Newtonsoft.Json;\nusing RestSharp;\nusing Lyzer.Common.Constants;\nusing Lyzer.Common.DTO;\nusing Lyzer.Errors;\n\nnamespace Lyzer.Clients\n{\n    public class JolpicaClient\n    {\n        private readonly ILogger&lt;JolpicaClient&gt; _logger;\n        private readonly RestClient _client;\n\n        public JolpicaClient(ILogger&lt;JolpicaClient&gt; logger)\n        {\n            RestClientOptions options = new RestClientOptions(URIConstants.Jolpica.BaseUri);\n            _client = new RestClient(options);\n            _logger = logger;\n        }\n\n        public async Task&lt;DriverStandingsDTO&gt; GetCurrentDriverStandings()\n        {\n            string requestPath = String.Format(URIConstants.Jolpica.DriverStandingsUri, \"current\");\n            JsonDocument? result = await _client.GetAsync&lt;JsonDocument&gt;(requestPath);\n\n            if (result == null)\n            {\n                throw new Exception404NotFound(\"Could not retrieve data at: \" + requestPath);\n            }\n\n            JsonElement root = result.RootElement;\n\n            JsonElement standings = root\n                .GetProperty(\"MRData\")\n                .GetProperty(\"StandingsTable\")\n                .GetProperty(\"StandingsLists\")[0];\n\n            DriverStandingsDTO? driverStandings = JsonConvert.DeserializeObject&lt;DriverStandingsDTO&gt;(standings.GetRawText());\n\n            if (driverStandings == null)\n            {\n                throw new SerializationException(\"Could not deserialize driver standings.\");\n            }\n\n            return driverStandings;\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/backend/overview/#repositories","title":"Repositories","text":"<p>Repositories are responsible for communicating with data storage such as a database (e.g., PostgreSQL). Currently, the project does not contain any repositories, but they will likely be needed in the future.</p> <p>Please note that repositories are similar to clients in that business logic and transformation should be kept to a minimum and generally avoided in these classes.</p>"},{"location":"architecture/backend/overview/#constants","title":"Constants","text":"<p>We use classes with constants for values that are frequently used. If we make changes to these values, they should reflect across the entire codebase.</p> <p>This is easy to manage with constants, as all values using the variable will be updated.</p> <p>An example is shown below:</p> <pre><code>namespace Lyzer.Common.Constants\n{\n    public static class URIConstants\n    {\n        public static class Jolpica\n        {\n            public static string BaseUri { get; set; } = \"https://api.jolpi.ca/ergast/f1\";\n            public static string DriverStandingsUri { get; set; } = \"/{0}/driverstandings\";\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/backend/overview/#dtos","title":"DTOs","text":"<p>You might be familiar with schemas, models, or other terms for these. In this codebase, they are referred to as DTOs (Data Transfer Objects).</p> <p>These objects represent what the API will return on successful calls.</p> <p>An example is shown below:</p> <pre><code>namespace Lyzer.Common.DTO\n{\n    public class DriverDTO\n    {\n        public string DriverId { get; set; }\n        public string PermanentNumber { get; set; }\n        public string Code { get; set; }\n        public string Url { get; set; }\n        public string GivenName { get; set; }\n        public string FamilyName { get; set; }\n        public DateTime DateOfBirth { get; set; }\n        public string Nationality { get; set; }\n    }\n}\n</code></pre>"},{"location":"architecture/backend/overview/#middleware","title":"Middleware","text":"<p>Middleware components are used to handle cross-cutting concerns such as logging, authentication, and error handling. They are executed in the order they are registered in the application pipeline.</p> <p>Currently we only use this for error handling.</p> <p>An example is shown below:</p> <pre><code>using Lyzer.Errors;\nusing Newtonsoft.Json;\n\nnamespace Lyzer.Middleware\n{\n    public class ExceptionHandlingMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly ILogger&lt;ExceptionHandlingMiddleware&gt; _logger;\n\n        public ExceptionHandlingMiddleware(RequestDelegate next, ILogger&lt;ExceptionHandlingMiddleware&gt; logger)\n        {\n            _next = next;\n            _logger = logger;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            try\n            {\n                await _next(context);\n            }\n            catch (Exception404NotFound ex)\n            {\n                _logger.LogError(ex, \"404 exception occurred.\");\n                await HandleExceptionAsync(context, StatusCodes.Status404NotFound, \"Not found.\", ex);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"An unhandled exception occurred.\");\n                await HandleExceptionAsync(context, StatusCodes.Status500InternalServerError, \"An unexpected error occurred.\", ex);\n            }\n        }\n\n        private static Task HandleExceptionAsync(HttpContext context, int statusCode, string message, Exception exception)\n        {\n            context.Response.ContentType = \"application/json\";\n            context.Response.StatusCode = statusCode;\n\n            var errorResponse = new\n            {\n                Message = message,\n                Details = exception.Message\n            };\n\n            return context.Response.WriteAsync(JsonConvert.SerializeObject(errorResponse));\n        }\n    }\n}\n</code></pre> <p>Middleware components are registered in the <code>Program.cs</code> file. For example:</p> <pre><code>var app = builder.Build();\n\napp.UseSwagger();\napp.UseSwaggerUI();\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\n\napp.UseMiddleware&lt;ExceptionHandlingMiddleware&gt;();\n</code></pre>"},{"location":"architecture/backend/overview/#errors","title":"Errors","text":"<p>Error handling is a crucial part of any application. In Lyzer, we handle errors using custom exceptions and middleware to ensure consistent and meaningful error responses.</p> <p>The middleware aspect of this was covered above, below you can find an example of a custom exception.</p> <pre><code>namespace Lyzer.Errors\n{\n    public class Exception404NotFound : Exception\n    {\n        public Exception404NotFound(string message) : base(message) { }\n    }\n}\n</code></pre>"},{"location":"architecture/backend/overview/#diagram","title":"Diagram","text":""},{"location":"architecture/frontend/overview/","title":"General Structure of the Frontend","text":"<p>The primary components to be aware of in the frontend are:</p> <ul> <li>Routes</li> <li>Pages</li> <li>Hooks</li> <li>Clients</li> <li>Layouts</li> <li>Components</li> <li>Styles</li> <li>Constants</li> </ul>"},{"location":"contributing/","title":"Contributing to Lyzer","text":"<p>Welcome to the Lyzer contributing guide! This section outlines how you can participate in the project's development and help make Lyzer better for everyone.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>There are many ways to contribute to Lyzer:</p> <ul> <li>Code contributions: Implementing new features or fixing bugs for existing issues</li> <li>Documentation: Improving or expanding our documentation</li> <li>Testing &amp; reporting issues: Helping test new features and identify issues</li> <li>Idea Proposals: Proposing new features or improvements</li> <li>Design Proposals: Enhancing the user experience and interface</li> <li>Highlighting Technical Debt: Highlighting technical debt and potential improvements</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Lyzer is a community project, and we expect all contributors to adhere to our code of conduct. This includes:</p> <ul> <li>Being respectful and inclusive</li> <li>Providing constructive feedback</li> <li>Focusing on what's best for the community</li> <li>Showing empathy towards other community members</li> </ul>"},{"location":"contributing/code/","title":"Code Contributions","text":"<p>Thank you for your interest in contributing to Lyzer! This guide will help you understand how to contribute code to our Formula 1 data analysis project.</p>"},{"location":"contributing/code/#before-you-start","title":"Before you start","text":"<p>This section specifically addresses how to contribute code to Lyzer for open issues, ensure to reach out to the maintainers before doing any work to ensure it is in line with the project goals and direction.</p>"},{"location":"contributing/code/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<p>Refer to the development getting started guide for instructions on how to set up your development environment.</p>"},{"location":"contributing/code/#maintainers-non-maintainers-should-still-read-this","title":"Maintainers (Non-maintainers should still read this)","text":"<p>Below we will cover the process of contributing code to Lyzer if you are a maintainer.</p>"},{"location":"contributing/code/#board","title":"Board","text":"<p>We have a board/project for managing issues in GitHub. If you are a maintainer, you should have edit/write access to the board, if you don't, please reach out to the team.</p> <p>Before picking up an issue, please ensure you have communicated to the team that you will be working on an issue and have assigned yourself to the issue.</p> <p>For code contributions, you should only be taking issues from the \"Todo\" column.</p> <p>Once you start working on an issue, please move the issue to the \"In Progress\" column.</p> <p>When you are ready to submit your PR and have it reviewed, please move the issue to the \"Ready for Review\" column.</p> <p>A maintainer will review your PR and either approve it or give you feedback.</p>"},{"location":"contributing/code/#prs","title":"PRs","text":"<p>When opening a PR, please ensure that your issue is linked to the PR.</p> <ul> <li>Ensure all workflows are passing</li> <li>Ensure that you have added tests for your changes</li> <li>Ensure that you have added documentation for your changes</li> <li>Ensure that you have added a description of the changes you have made</li> <li>Ensure that you have assigned yourself to the PR</li> <li>Ensure that you have moved the issue to the \"Ready for Review\" column</li> <li>Assign reviewers to the PR</li> </ul>"},{"location":"contributing/code/#non-maintainers","title":"Non-maintainers","text":"<p>If you are not a maintainer, you can still contribute to Lyzer by working on open issues.</p> <p>You will have to communicate your interest to work on the issue with a comment, ensure to tag a maintainer in the comment requesting to work on the issue.</p> <p>Once you have been assigned to the issue and given verbal confirmation by a maintainer, you can start working on it.</p> <p>You will likely need to fork the repository to your GitHub account to work on the issue.</p> <p>Once you have made your changes, you can push your changes to your fork and open a PR into the main repository.</p>"},{"location":"contributing/code/#board_1","title":"Board","text":"<p>We have a board/project for managing issues in GitHub. If you are not a maintainer, you will have only read access to the board.</p> <p>This will require you to communicate your interest in working on an issue with a comment, and then a maintainer will need to assign you to the issue and move it for you to start working on it.</p> <p>It it critical that you communicate the progress of the issue with comments in the issue and PR, and keeping the maintainer updated.</p>"},{"location":"contributing/code/#prs_1","title":"PRs","text":"<p>When opening a PR, please ensure that your issue is linked to the PR.</p> <ul> <li>Ensure all workflows are passing</li> <li>Ensure that you have added tests for your changes</li> <li>Ensure that you have added documentation for your changes</li> <li>Ensure that you have added a description of the changes you have made</li> <li>Ensure that you have assigned yourself to the PR</li> <li>Ensure that the maintainer has moved the issue to the \"Ready for Review\" column</li> <li>Assign reviewers to the PR</li> </ul>"},{"location":"contributing/design/","title":"Design Contributions","text":"<p>Thank you for your interest in contributing to Lyzer's design! This guide will help you understand how to contribute to the design of the application.</p> <p>This can fall into two categories:</p> <ul> <li>UI/UX Design</li> <li>Architectural Design</li> </ul> <p>We will cover both of these in this guide.</p>"},{"location":"contributing/design/#uiux-design","title":"UI/UX Design","text":"<p>First and foremost, thank you for your contribution. At the stage of writing this, we are only 2 developers with limited UX experience, so we are always looking for ways to improve the application.</p>"},{"location":"contributing/design/#making-a-design-propsal","title":"Making a design propsal","text":"<p>We do not expect designers to have to dive into git and create a PR, so please follow the following template to create a design proposal in the GitHub issues.</p> <pre><code># Design Proposal\n\n## Description\n\nA clear and concise description of the design proposal.\n\n## Screenshots/Mockups\n\nScreenshots or mockups of the design proposal.\n\n## Additional Context\n\nAny other context that you think is relevant to the design proposal. Formatted however you see fit.\n\n## Can we contact you?\n\nIn this section just let us know if we can contact you for further discussions and if you would like to be credited for your work. We believe that design is an always ongoing effort and we would love to be able to talk to you about it.\n</code></pre>"},{"location":"contributing/design/#review-process","title":"Review Process","text":"<p>When you open your issue, it will be reviewed by a maintainer (please do tag them in the issue).</p> <p>If we need to make any changes, we will prioritize and get it resolved as soon as possible.</p>"},{"location":"contributing/design/#architectural-design","title":"Architectural Design","text":"<p>This is where you will be able to help us design or make changes to the architecture of the application.</p>"},{"location":"contributing/design/#making-a-propsal","title":"Making a propsal","text":"<p>We do not expect you to dive into git and create a PR, so please follow the following template to create a design proposal in the GitHub issues.</p> <pre><code># Design Proposal\n\n## Description\n\nA clear and concise description of the design proposal.\n\n## Benefits\n\nA clear and concise description of the benefits of the design proposal.\n\n## Drawbacks\n\nA clear and concise description of the drawbacks of the design proposal. If there are no drawbacks, just say that.\n\n## Additional Context\n\nAny other context that you think is relevant to the design proposal. Formatted however you see fit.\n\nWe always appreciate some diagrams, so please feel free to add them to the issue.\n\n## Can we contact you?\n\nIn this section just let us know if we can contact you for further discussions and if you would like to be credited for your work. We believe that design is an always ongoing effort and we would love to be able to talk to you about it.\n</code></pre>"},{"location":"contributing/design/#review-process_1","title":"Review Process","text":"<p>When you open your issue, it will be reviewed by a maintainer (please do tag them in the issue).</p> <p>If we need to make any changes, we will prioritize and get it resolved as soon as possible.</p>"},{"location":"contributing/design/#thank-you","title":"Thank you","text":"<p>Thank you for taking your time to contribute to the design of the application.</p>"},{"location":"contributing/docs/","title":"Documentation Contributions","text":"<p>Thank you for your interest in contributing to Lyzer's documentation! This guide will help you understand how to contribute to the documentation.</p>"},{"location":"contributing/docs/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<p>Refer to the development getting started guide for instructions on how to set up your development environment.</p> <p>You should also look at the code contribution guidelines for instructions on how to contribute code to Lyzer, as the process is similar.</p>"},{"location":"contributing/docs/#contributing","title":"Contributing","text":"<p>For documentation contributions, you do not require an issue to start contributing.</p> <p>We welcome all documentation contributions, when you open your PR ensure that you are detailing why the changes were made, what the benefits are, and any other relevant information.</p> <p>When writing documentation, consider the following:</p> <ul> <li>Use Markdown consistently</li> <li>Include a clear title (H1) at the top of each document</li> <li>Organize content with hierarchical headings (H2, H3, etc.)</li> <li>Use bulleted lists for items without specific sequence</li> <li>Use numbered lists for sequential steps</li> <li>Include code blocks with appropriate language tags</li> <li>Add diagrams when they clarify complex concepts (using Excalidraw or similar)</li> <li>Ensure you put assets into the <code>assets</code> directory within the folder you are working in.<ul> <li>Assets are things like images, diagrams, etc.</li> </ul> </li> </ul>"},{"location":"contributing/docs/#review-process","title":"Review Process","text":"<p>When you open your PR, it will be reviewed by a maintainer.</p> <p>The maintainer will review your PR and either approve it or give you feedback.</p> <p>If you need to make changes, you can do so by committing to your branch and pushing to your PR.</p> <p>Once you have made the changes, you can request a review from the maintainer.</p>"},{"location":"contributing/ideas/","title":"Idea Proposal Guidelines","text":"<p>To help you create effective idea proposals, we provide:</p> <ul> <li>Idea Proposal Framework: Our standard framework for proposing new ideas</li> <li>Example Proposal: A sample proposal demonstrating how to apply the framework</li> </ul>"},{"location":"contributing/reporting-issues/","title":"Reporting Issues","text":"<p>Things get messy, and issues happen and if you are reading this, we are hoping that you are able to help us fix them.</p>"},{"location":"contributing/reporting-issues/#before-you-start","title":"Before you start","text":"<p>Thank you for taking your time to report an issue.</p> <p>When reporting an issue, note that these should be bugs with the application, not feature requests.</p> <p>We welcome feature requests, but you will find more information in the ideas proposal documentation for this.</p>"},{"location":"contributing/reporting-issues/#logging-a-bugissue","title":"Logging a bug/issue","text":"<p>Please use the template below to log a bug/issue.</p> <pre><code># Bug Report\n\n## Description\n\nA clear and concise description of the bug.\n\n## Steps to Reproduce\n\nSteps to reproduce the bug.\n\n## Expected Behavior\n\nA clear and concise description of what you expected to happen.\n\n## Actual Behavior\n\nA clear and concise description of what actually happened.\n\n## Screenshots\n\nScreenshots of the issue, if applicable.\n\n## Logs\n\nLogs from the application, if applicable.\n\n## Platform Information\n\n- Browser [e.g. Chrome, Firefox, Safari]\n- Operating System [e.g. Windows, MacOS, Linux]\n- Version [e.g. 1.0.0 or link to commit in the main branch]\n- Development environment information (if applicable)\n\n## Additional Context\n\nAny other context that you think is relevant to the issue.\n</code></pre>"},{"location":"contributing/reporting-issues/#review-process","title":"Review Process","text":"<p>When you open your issue, it will be reviewed by a maintainer (please do tag them in the issue).</p> <p>If we need to make any changes, we will prioritize and get it resolved as soon as possible.</p>"},{"location":"contributing/reporting-issues/#thank-you","title":"Thank you","text":"<p>Thank you for taking your time to report an issue.</p>"},{"location":"contributing/tech-debt/","title":"Tech Debt Identification","text":"<p>To help us identify tech debt, we have a framework and examples for documenting it, see below:</p> <ul> <li>Tech Debt Identification Framework</li> <li>Example Tech Debt Identification</li> </ul>"},{"location":"dev/","title":"Development (Getting Started)","text":"<p>Welcome to the Lyzer development getting started guide! This guide will help you set up everything you need to start contributing to the project.</p>"},{"location":"dev/#prerequisites","title":"Prerequisites","text":"<p>Before diving into development, ensure you have the following tools installed:  </p> <ul> <li>Docker: For containerizing and managing the development environment.  </li> <li>Docker Compose: To orchestrate the various containers required for Lyzer.  </li> <li>An IDE or Editor: We recommend Visual Studio for backend development and Visual Studio Code for frontend development, but feel free to use your preferred editor.</li> </ul>"},{"location":"dev/#starting-the-development-environment","title":"Starting the Development Environment","text":"<p>Using docker, starting the development environment is as easy as running in the root directory:</p> <pre><code>docker compose watch\n</code></pre> <p>This will start the development environment and automatically load changes or rebuild containers when necessary.</p> <p>You can also use the following commands for more control:</p> <pre><code>docker compose up -d --build # Build and start the containers in detached mode\ndocker compose up # Start the containers and attach to the logs (useful for debugging)\n</code></pre> <p>To stop the development environment, run:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"dev/#urls","title":"URLs","text":"<ul> <li>Backend: <code>http://localhost:8080</code></li> <li>Frontend: <code>http://localhost:5173</code></li> <li>Docs: <code>http://localhost:8000</code></li> <li>Redis: <code>http://localhost:6379</code></li> </ul>"},{"location":"dev/#troubleshooting","title":"Troubleshooting","text":""},{"location":"dev/#common-issues","title":"Common Issues","text":"<ul> <li>Port Conflicts: Ensure no other services are running on the same ports used by Lyzer.  </li> </ul>"},{"location":"dev/#getting-help","title":"Getting Help","text":"<p>If you encounter issues that you can\u2019t resolve, feel free to open an issue in the GitHub repository or reach out to the project maintainers.</p>"},{"location":"proposals/examples/example-idea-proposal/","title":"WIP - Coming Soon","text":""},{"location":"proposals/examples/example-tech-debt-identification/","title":"Valkey Migration","text":"<ul> <li>Author: Evanlab02</li> <li>Email: evanlabuschagne70@gmail.com</li> <li>Date: 2025-03-12</li> <li>Status: Review</li> <li>Planned: No</li> <li>Milestone: Not assigned</li> </ul>"},{"location":"proposals/examples/example-tech-debt-identification/#summary","title":"Summary","text":"<p>Migrate from Redis to Valkey as our caching solution due to Redis licensing changes. This migration will ensure license compatibility for our project and prevent potential issues down the line, while maintaining all current caching functionality.</p>"},{"location":"proposals/examples/example-tech-debt-identification/#impact-assessment","title":"Impact Assessment","text":"<ul> <li>Severity: Medium</li> <li>Scope: Component</li> <li>Risk Profile: Medium risk if not addressed</li> <li>Development Impact: Low immediate impact, potential future licensing concerns</li> <li>Area: Backend</li> </ul>"},{"location":"proposals/examples/example-tech-debt-identification/#detailed-description","title":"Detailed Description","text":"<p>Lyzer currently uses Redis as a caching solution for F1 data, implemented through the <code>CacheService</code> using the StackExchange.Redis client library. Redis recently changed its licensing model, which could potentially affect our usage and compliance in the future.</p> <p>Valkey is a Redis-compatible fork that maintains compatibility with the Redis API while offering a more permissive license. As the Redis project continues to evolve its licensing, migrating to Valkey would protect us from potential future restrictions or compliance issues.</p> <p>Current implementation details: - We use Redis 7.4.1-alpine3.20 in Docker containers - Connection is managed via StackExchange.Redis 2.8.16 NuGet package - Data is stored as serialized JSON strings with various TTLs (1-24 hours) - Used throughout our services (RacesService, ResultsService, DriverService, ConstructorService) for caching API responses</p>"},{"location":"proposals/examples/example-tech-debt-identification/#proposed-resolution","title":"Proposed Resolution","text":"<ol> <li>Replace Redis Docker images with Valkey images in all compose files:</li> <li>Update <code>compose.yaml</code> and <code>compose.staging.yaml</code> to use Valkey instead of Redis</li> <li> <p>Ensure proper image tagging and version selection</p> </li> <li> <p>Evaluate compatibility:</p> </li> <li>Confirm StackExchange.Redis works with Valkey (expected to work seamlessly)</li> <li> <p>Document any configuration differences</p> </li> <li> <p>Testing:</p> </li> <li>Create comprehensive tests to verify caching functionality</li> <li> <p>Validate all existing cache operations (Get, Add, Remove, exists)</p> </li> <li> <p>Documentation updates:</p> </li> <li>Update architecture docs to reflect the change from Redis to Valkey</li> <li>Document the migration process and any configuration changes</li> </ol>"},{"location":"proposals/examples/example-tech-debt-identification/#benefits-of-resolution","title":"Benefits of Resolution","text":"<ul> <li>License Compliance: Protects the project from potential Redis license restrictions</li> <li>Future-Proofing: Reduces dependency on Redis' evolving license terms</li> <li>Maintenance: Valkey is actively maintained and Redis-compatible, ensuring long-term viability</li> <li>No Functionality Change: All current caching capabilities will be preserved</li> <li>Knowledge Sharing: Team familiarity with Redis will transfer to Valkey with minimal retraining</li> </ul>"},{"location":"proposals/examples/example-tech-debt-identification/#risks-of-deferral","title":"Risks of Deferral","text":"<ul> <li>License Compliance Issues: Future Redis license changes might conflict with our usage</li> </ul>"},{"location":"proposals/examples/example-tech-debt-identification/#acceptance-criteria","title":"Acceptance Criteria","text":"<p>The migration will be considered successful when:</p> <ol> <li>All Docker configurations use Valkey images instead of Redis</li> <li>All existing caching functionality works identically with Valkey</li> <li>All tests pass with the new implementation</li> <li>Documentation is updated to reflect the change</li> </ol>"},{"location":"proposals/ideas/ETL/","title":"Lyzer ETL","text":"<ul> <li>Author: Evanlab02</li> <li>Email: evanlab02@gmail.com</li> <li>Date: 2025-03-20</li> <li>Status: Review</li> <li>Planned: No</li> <li>Milestone: Not planned</li> </ul>"},{"location":"proposals/ideas/ETL/#summary","title":"Summary","text":"<p>Since the inception of Lyzer, there has always been a consideration to add an ETL process and we are now at a point where we can start to plan this.</p> <p>The ETL process will be used to extract historical F1 data from Jolpica and store that in our database. We could also use it for current data where expensive computations are required.</p> <p>This will reduce the load on our API and Jolpica and make the system more efficient.</p>"},{"location":"proposals/ideas/ETL/#motivation","title":"Motivation","text":"<p>What does it solve:</p> <ul> <li>Removes the reliance on only a cache for F1 data and instead store it in a more durable and scalable way using a database.</li> <li>Allows us to compute metrics and store the calculations for use later on, reducing overhead on the API,</li> <li>Also allowing us to use a more durable store for data from previous seasons like driver standings, results etc. Things that will not change. Significantly reducing the amount of load we create for Jolpica.</li> <li>Provides a historical data store for analytics.</li> </ul> <p>Who benefits:</p> <ul> <li>The users of the API will see faster response times and a more reliable service.</li> <li>We will see a reduction in the load on Jolpica (and giving them less to worry about) allowing us to also use our rate limit more efficiently for when we need it.</li> </ul>"},{"location":"proposals/ideas/ETL/#detailed-description","title":"Detailed Description","text":""},{"location":"proposals/ideas/ETL/#technical-details","title":"Technical Details","text":""},{"location":"proposals/ideas/ETL/#stack","title":"Stack","text":"<p>We will use python to create the ETL process due to its ease of use and modularity.</p> <p>We will combine this with:</p> <ul> <li><code>typer</code> to create a CLI for the ETL process.</li> <li><code>fastapi</code> available to expose a REST API for the ETL process.</li> </ul> <p>This will allow us to have a flexible and scalable ETL process that can be used in a variety of ways, lets explore some of the ways this is useful</p> <ul> <li>Great local development experience, we can just run the CLI to quickly populate our local database for development for whatever functionality we are testing.</li> <li>The CLI allows us to have an easy fallback to manually populate the production database if needed.</li> <li>The REST API will allow us to have a flexible way to populate the database for whatever data we need and make it easy to access from anywhere removing the need to have a local CLI always available.</li> </ul> <p>Some other dependencies that could likely be used:</p> <ul> <li><code>SQLModel</code></li> <li><code>pydantic</code></li> </ul> <p>Typer, FastAPI and SQLModel are all developed by @tiangolo and are all published under FastAPI's organization and have impressive compatibility with each other.</p> <p>Pydantic is the a standard for many frameworks for APIs and therefore is great addition, also FastAPI is built with Pydantic as a core dependency.</p> <p>We will likely need to use something like <code>alembic</code> to create migrations for the database.</p>"},{"location":"proposals/ideas/ETL/#structuring","title":"Structuring","text":"<p>Important to note here is that this will take a careful structuring in the source code to ensure that we can easily use functionality from the codebase in the CLI and API. This just means that things like typer and fastapi will be used to wrap the functionality of the codebase and is simply just exposing the functionality of the codebase to the CLI and API which is anyways a good design principle.</p>"},{"location":"proposals/ideas/ETL/#database-design","title":"Database Design","text":"<p>NOTE: There is one thing that was missed here and that is that we will likely store Qualifying, Sprint and Sprint Qualifying data in a seperate table than the session table. This way we can continue the result table trend and create new tables that link to sprint/sprint qualifying/qualifying session tables. Session tables can probably be more accurately named as practice session table.</p>"},{"location":"proposals/ideas/ETL/#implementation-plan","title":"Implementation plan","text":"<p>Here is a very rough draft implementation plan:</p> <ol> <li>Create a very basic <code>hello world</code> application using typer and fastapi to get a good initial structure in place.</li> <li>Create commands/endpoints for the following (NOTE that some of these steps could likely be broken down further as there will be multiple tables that can be created from the data):<ul> <li>Fetching and storing races data.</li> <li>Fetching and storing constructor data.</li> <li>Fetching and storing driver data.</li> <li>Fetching and storing results data.</li> </ul> </li> <li>Allow for different configurations to be saved to the device (to allow easy switching between local/production)</li> <li>Consume the DB that this ETL process creates from the official Lyzer API.</li> </ol> <p>Continue using ETL process to create new features and data that we want to store in the DB.</p>"},{"location":"proposals/ideas/framework/","title":"Idea Proposal Framework","text":"<p>This document outlines the standard process for proposing, documenting, and implementing new ideas within the Lyzer project.</p>"},{"location":"proposals/ideas/framework/#1-proposal-template","title":"1. Proposal Template","text":"<p>When proposing a new feature, architectural change, or significant enhancement, please use the following template:</p> <pre><code># [Idea Title]\n\n- Author: [Your GitHub Username]\n- Email: [Your Email, if you feel comfortable sharing it]\n- Date: [Date of proposal]\n- Status: [Draft/Review/Approved/Rejected/In Progress/Done]\n- Planned: [Yes/No]\n- Milestone: [Milestone name if planned]\n\n## Summary\nA concise summary (2-3 sentences) of the proposed idea.\n\n## Motivation\nWhy is this idea valuable? What problems does it solve? Who benefits?\n\n## Detailed Description\n\nA thorough explanation of the idea, including:\n\n- Technical details\n- Diagrams where applicable\n- Basic mockups where applicable\n- Implementation approach\n- Any alternatives considered (where applicable)\n\n## Requirements\n\n- Functional requirements\n- Non-functional requirements (performance, security, etc.)\n- Dependencies on other systems/features\n\n## Implementation Plan\n- Step by step implementation plan\n    - This can change as we learn more about the idea, just a starting point\n\n## Risks and Concerns\nAny potential issues or challenges that should be considered.\n\n## Open Questions\nList any aspects that need further clarification.\n</code></pre>"},{"location":"proposals/ideas/framework/#2-review-process","title":"2. Review Process","text":"<p>All idea proposals should follow these review steps:</p> <ol> <li>Draft Creation: Author creates the proposal document following the template above</li> <li>Peer Review: Share with maintainers for initial feedback</li> <li>Refinement: Update based on initial feedback</li> <li>Approval: Receive formal approval from the maintainers</li> <li>Documentation: Finalize and integrate into project documentation</li> <li>Wait for next milestone planning: The idea will be considered for the next milestone</li> </ol>"},{"location":"proposals/ideas/framework/#3-documentation-standards","title":"3. Documentation Standards","text":""},{"location":"proposals/ideas/framework/#directory-structure","title":"Directory Structure","text":"<p>Place the idea documentation in the appropriate directory:</p> <ul> <li><code>/Docs/docs/proposals/ideas/</code> - For idea proposals</li> </ul>"},{"location":"proposals/ideas/framework/#formatting-guidelines","title":"Formatting Guidelines","text":"<ul> <li>Use Markdown consistently</li> <li>Include a clear title (H1) at the top of each document</li> <li>Organize content with hierarchical headings (H2, H3, etc.)</li> <li>Use bulleted lists for items without specific sequence</li> <li>Use numbered lists for sequential steps</li> <li>Include code blocks with appropriate language tags</li> <li>Add diagrams when they clarify complex concepts (using Excalidraw or similar)</li> </ul>"},{"location":"proposals/ideas/framework/#images-and-diagrams","title":"Images and Diagrams","text":"<ul> <li>Store images in the appropriate <code>/Docs/docs/proposals/ideas/assets/</code> subdirectory</li> <li>Use descriptive filenames for images</li> </ul>"},{"location":"proposals/ideas/framework/#links-and-references","title":"Links and References","text":"<ul> <li>Use relative links for internal documentation references</li> <li>Include descriptive link text (avoid \"click here\")</li> <li>Verify all links work before committing</li> <li>Include references to external resources when applicable</li> </ul>"},{"location":"proposals/ideas/framework/#4-integration-with-development-process","title":"4. Integration with Development Process","text":"<p>Documentation should be integrated with our development process:</p> <ol> <li>Proposal First: Document ideas before implementation begins</li> <li>Update During Development: Revise documentation as implementation progresses</li> <li>Review Documentation: Include documentation review in PR process</li> </ol>"},{"location":"proposals/ideas/framework/#example-proposal","title":"Example Proposal","text":"<p>See Example Feature Proposal for a complete example following this framework.</p>"},{"location":"proposals/tech-debt/NET9/","title":"Upgrading to .NET 9","text":"<ul> <li>Author: Evanlab02</li> <li>Email: evanlabuschagne70@gmail.com</li> <li>Date: 2025-03-10</li> <li>Status: Review</li> <li>Planned: No</li> <li>Milestone: Not planned</li> </ul>"},{"location":"proposals/tech-debt/NET9/#summary","title":"Summary","text":"<p>We are using .NET 8 in the Lyzer project. We should upgrade to .NET 9 as it has some new features and improvements and to reduce any future headaches.</p> <p>This is a natural part of development, at the time of creation of the project .NET 8 was the latest version. .NET 9 might have been released but not widely supported yet.</p> <p>This is not causing any issues asof yet.</p>"},{"location":"proposals/tech-debt/NET9/#impact-assessment","title":"Impact Assessment","text":"<ul> <li>Severity: Low</li> <li>Scope: Component</li> <li>Risk Profile: Low</li> <li>Development Impact: No impact, except for actual upgrading work.</li> <li>Area: Backend</li> </ul>"},{"location":"proposals/tech-debt/NET9/#proposed-resolution","title":"Proposed Resolution","text":"<p>To upgrade we would need to:</p> <ol> <li>Upgrade the .NET version in the project.<ol> <li>Update the .csproj file to use .NET 9</li> <li>Update our docker images to use .NET 9</li> <li>Update our GitHub Actions to use .NET 9</li> <li>Update our documentation to reflect that we are using .NET 9</li> </ol> </li> <li>Ensure everything still works as expected</li> <li>Get it merged in.</li> </ol>"},{"location":"proposals/tech-debt/NET9/#benefits-of-resolution","title":"Benefits of Resolution","text":"<p>The benefits of upgrading to .NET 9 are:</p> <ul> <li>New features and improvements that we can use</li> <li>Less potential down the line issues</li> </ul> <p>Some potential downsides are:</p> <ul> <li>We could still be early adopters and have issues with some packages/dependencies</li> <li>There is no immediate benefit</li> </ul>"},{"location":"proposals/tech-debt/NET9/#risks-of-deferral","title":"Risks of Deferral","text":"<ul> <li>Future headaches due to:<ul> <li>Migration issues if needing to migrate several major versions</li> <li>Potential issues with packages/dependencies</li> <li>Limitations on .NET 8 features</li> </ul> </li> </ul>"},{"location":"proposals/tech-debt/NET9/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>We have upgraded to .NET 9</li> <li>Everything is working as expected</li> <li>We have updated our documentation to reflect that we are using .NET 9</li> <li>We have tested the project with .NET 9</li> </ul>"},{"location":"proposals/tech-debt/React19/","title":"React 19 Migration","text":"<ul> <li>Author: Evanlab02</li> <li>Email: evanlabuschagne70@gmail.com</li> <li>Date: 2025-03-12</li> <li>Status: Review</li> <li>Planned: No</li> <li>Milestone: Not planned</li> </ul>"},{"location":"proposals/tech-debt/React19/#summary","title":"Summary","text":"<p>We are currently using React 18.3.1 in the Lyzer project frontend. I propose upgrading to React 19. While React 18.3.1 is not yet causing any issues, planning ahead for this migration will ensure smoother adoption of new features and prevent potential compatibility issues in the future.</p>"},{"location":"proposals/tech-debt/React19/#impact-assessment","title":"Impact Assessment","text":"<ul> <li>Severity: Low</li> <li>Scope: Component</li> <li>Risk Profile: Low</li> <li>Development Impact: No immediate impact, except for actual upgrading work and potential component adjustments</li> <li>Area: Frontend</li> </ul>"},{"location":"proposals/tech-debt/React19/#detailed-description","title":"Detailed Description","text":"<p>React 19 is expected to introduce several improvements and new features that could benefit our application. Our current React 18.3.1 implementation works well, but as React 19 becomes the standard, we may encounter:</p> <ul> <li>Increasing compatibility issues with newer libraries that target React 19</li> <li>Missing out on performance improvements and new features</li> <li>Potential security updates that are only available in newer versions</li> <li>Growing complexity in eventual migration if deferred too long</li> </ul> <p>The migration task involves updating the React core packages, testing for compatibility issues with our existing components, and potentially refactoring code to adapt to any breaking changes.</p>"},{"location":"proposals/tech-debt/React19/#proposed-resolution","title":"Proposed Resolution","text":"<p>To successfully migrate to React 19, we would need to:</p> <ol> <li>Review the official migration guide and changelog</li> <li>Update our package.json dependencies</li> <li>Update <code>react</code> from ^18.3.1 to ^19.0.0</li> <li>Update <code>react-dom</code> from ^18.3.1 to ^19.0.0</li> <li>Update <code>@types/react</code> and <code>@types/react-dom</code> to compatible versions</li> <li>Run and fix any dependency conflicts</li> <li>Test all components for compatibility issues</li> <li>Address any deprecated API usages</li> <li>Update our CI/CD pipeline to ensure compatibility</li> <li>Update documentation to reflect React 19 usage</li> </ol>"},{"location":"proposals/tech-debt/React19/#benefits-of-resolution","title":"Benefits of Resolution","text":"<p>The benefits of upgrading to React 19 would include:</p> <ul> <li>Access to new React features and improvements</li> <li>Better compatibility with the latest React ecosystem</li> <li>Improved performance of our frontend application</li> <li>Reduced technical debt through incremental updates rather than major leaps</li> <li>Preventing security vulnerabilities that might only be fixed in newer versions</li> </ul> <p>Some potential downsides include:</p> <ul> <li>Initial development effort required for the upgrade</li> <li>Potential breaking changes requiring component refactoring</li> <li>Possibility of being early adopters if upgraded too soon</li> </ul>"},{"location":"proposals/tech-debt/React19/#risks-of-deferral","title":"Risks of Deferral","text":"<ul> <li>Growing migration complexity as we fall further behind the latest version</li> <li>Increasing incompatibility with newer libraries and tools</li> <li>Missing out on performance and security improvements</li> <li>Higher developer time cost when eventually forced to upgrade</li> <li>More challenging debugging if using outdated React patterns</li> </ul>"},{"location":"proposals/tech-debt/React19/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>All frontend components function as expected with React 19</li> <li>All tests pass with the upgraded React version</li> <li>Build and deployment processes work correctly</li> <li>No regression in application performance</li> <li>Documentation is updated to reflect React 19 usage</li> <li>No critical console warnings related to deprecated API usage</li> </ul>"},{"location":"proposals/tech-debt/Valkey/","title":"Valkey Migration","text":"<ul> <li>Author: Evanlab02</li> <li>Email: evanlabuschagne70@gmail.com</li> <li>Date: 2025-03-12</li> <li>Status: Review</li> <li>Planned: No</li> <li>Milestone: Not planned</li> </ul>"},{"location":"proposals/tech-debt/Valkey/#summary","title":"Summary","text":"<p>Migrate from Redis to Valkey as our caching solution due to Redis licensing changes. This migration will ensure license compatibility for our project and prevent potential issues down the line, while maintaining all current caching functionality.</p>"},{"location":"proposals/tech-debt/Valkey/#impact-assessment","title":"Impact Assessment","text":"<ul> <li>Severity: Medium</li> <li>Scope: Component</li> <li>Risk Profile: Medium risk if not addressed</li> <li>Development Impact: Low immediate impact, potential future licensing concerns</li> <li>Area: Backend</li> </ul>"},{"location":"proposals/tech-debt/Valkey/#detailed-description","title":"Detailed Description","text":"<p>Lyzer currently uses Redis as a caching solution for F1 data, implemented through the <code>CacheService</code> using the StackExchange.Redis client library. Redis recently changed its licensing model, which could potentially affect our usage and compliance in the future.</p> <p>Valkey is a Redis-compatible fork that maintains compatibility with the Redis API while offering a more permissive license. As the Redis project continues to evolve its licensing, migrating to Valkey would protect us from potential future restrictions or compliance issues.</p> <p>Current implementation details:</p> <ul> <li>We use Redis 7.4.1-alpine3.20 in Docker containers</li> <li>Connection is managed via StackExchange.Redis 2.8.16 NuGet package</li> <li>Data is stored as serialized JSON strings with various TTLs (1-24 hours)</li> <li>Used throughout our services (RacesService, ResultsService, DriverService, ConstructorService) for caching API responses</li> </ul>"},{"location":"proposals/tech-debt/Valkey/#proposed-resolution","title":"Proposed Resolution","text":"<p>Replace Redis Docker images with Valkey images in all compose files:</p> <ul> <li>Update <code>compose.yaml</code> and <code>compose.staging.yaml</code> to use Valkey instead of Redis</li> <li>Ensure proper image tagging and version selection</li> </ul> <p>Evaluate compatibility:</p> <ul> <li>Confirm StackExchange.Redis works with Valkey (expected to work seamlessly)</li> <li>Document any configuration differences</li> </ul> <p>Testing:</p> <ul> <li>Create comprehensive tests to verify caching functionality</li> <li>Validate all existing cache operations (Get, Add, Remove, exists)</li> </ul> <p>Documentation updates:</p> <ul> <li>Update architecture docs to reflect the change from Redis to Valkey</li> <li>Document the migration process and any configuration changes</li> </ul>"},{"location":"proposals/tech-debt/Valkey/#benefits-of-resolution","title":"Benefits of Resolution","text":"<ul> <li>License Compliance: Protects the project from potential Redis license restrictions</li> <li>Future-Proofing: Reduces dependency on Redis' evolving license terms</li> <li>Maintenance: Valkey is actively maintained and Redis-compatible, ensuring long-term viability</li> <li>No Functionality Change: All current caching capabilities will be preserved</li> <li>Knowledge Sharing: Team familiarity with Redis will transfer to Valkey with minimal retraining</li> </ul>"},{"location":"proposals/tech-debt/Valkey/#risks-of-deferral","title":"Risks of Deferral","text":"<ul> <li>License Compliance Issues: Future Redis license changes might conflict with our usage</li> </ul>"},{"location":"proposals/tech-debt/Valkey/#acceptance-criteria","title":"Acceptance Criteria","text":"<p>The migration will be considered successful when:</p> <ol> <li>All Docker configurations use Valkey images instead of Redis</li> <li>All existing caching functionality works identically with Valkey</li> <li>All tests pass with the new implementation</li> <li>Documentation is updated to reflect the change</li> </ol>"},{"location":"proposals/tech-debt/Vite6/","title":"Vite 6 Migration","text":"<ul> <li>Author: Evanlab02</li> <li>Email: evanlabuschagne70@gmail.com</li> <li>Date: 2025-03-15</li> <li>Status: Review</li> <li>Planned: No</li> <li>Milestone: Not planned</li> </ul>"},{"location":"proposals/tech-debt/Vite6/#summary","title":"Summary","text":"<p>We are currently using Vite 5.4.10 in the Lyzer project frontend. This tech debt document proposes upgrading to Vite 6. While our current Vite version is working well, upgrading to Vite 6 would provide performance improvements, new features, and ensure we stay current with the ecosystem.</p>"},{"location":"proposals/tech-debt/Vite6/#impact-assessment","title":"Impact Assessment","text":"<ul> <li>Severity: Low</li> <li>Scope: Component</li> <li>Risk Profile: Low</li> <li>Development Impact: Minimal immediate impact, primarily affecting build tooling</li> <li>Area: Frontend</li> </ul>"},{"location":"proposals/tech-debt/Vite6/#detailed-description","title":"Detailed Description","text":"<p>Vite 6 introduced several improvements and changes including:</p> <ul> <li>Node.js Support: Support for Node.js 18, 20, and 22+ (dropped Node.js 21 support)</li> <li>New Experimental Environment API: Providing better control over environment variables</li> <li>Changes to resolve.conditions: New default value affecting module resolution</li> <li>JSON Handling Improvements: Changes to JSON stringify behavior</li> <li>Enhanced Asset Reference Support: Extended support for asset references in HTML elements</li> <li>Better Error Messages: Improved error message formatting and clarity</li> <li>Plugin API Enhancements: Updated plugin hooks and capabilities</li> </ul> <p>Our current Vite 5.4.10 implementation works well, but as Vite 6 becomes more widely adopted, we may face:</p> <ul> <li>Compatibility issues with newer plugins that target Vite 6</li> <li>Missing out on build performance improvements</li> <li>Increased difficulty migrating if we delay too long</li> <li>Potential security fixes only available in newer versions</li> </ul>"},{"location":"proposals/tech-debt/Vite6/#proposed-resolution","title":"Proposed Resolution","text":"<p>To successfully migrate to Vite 6, we would need to:</p> <ol> <li>Review the official Vite 6 Migration Guide</li> <li>Update our package.json dependencies:</li> <li>Update <code>vite</code> from ^5.4.10 to ^6.0.0</li> <li>Update <code>@vitejs/plugin-react-swc</code> to a compatible version</li> <li>Update <code>vitest</code> and related packages as needed</li> <li>Check our Node.js version to ensure compatibility (18, 20, or 22+)</li> <li>Verify any changes related to module resolution (resolve.conditions)</li> <li>Review our JSON imports for potential impacts from JSON stringify changes</li> <li>Test our builds for any issues related to asset references in HTML</li> <li>Update our CI/CD pipeline configurations as needed</li> <li>Perform thorough testing of the development and build processes</li> </ol>"},{"location":"proposals/tech-debt/Vite6/#benefits-of-resolution","title":"Benefits of Resolution","text":"<p>The benefits of upgrading to Vite 6 include:</p> <ul> <li>Improved Build Performance: Vite 6 includes optimizations for faster builds</li> <li>Enhanced Developer Experience: Better error messages and debugging</li> <li>New Features: Access to the experimental Environment API and other new features</li> <li>Future Compatibility: Staying current with the ecosystem to prevent larger migrations later</li> <li>Security Improvements: Potential security enhancements included in newer versions</li> </ul> <p>Some potential downsides include:</p> <ul> <li>Initial development effort required for the upgrade</li> <li>Possible incompatibilities with other tools or plugins</li> <li>Potential need to adapt to new defaults and behaviors</li> </ul>"},{"location":"proposals/tech-debt/Vite6/#risks-of-deferral","title":"Risks of Deferral","text":"<ul> <li>Widening gap between our tooling and current standards</li> <li>Increasing complexity of eventual migration</li> <li>Missing out on performance improvements and bug fixes</li> <li>Potential incompatibility with newer plugins and tools</li> <li>Security vulnerabilities that are fixed in newer versions</li> </ul>"},{"location":"proposals/tech-debt/Vite6/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>Development server starts and runs correctly with Vite 6</li> <li>Production builds complete successfully</li> <li>All existing functionality works as expected in development and production</li> <li>Hot Module Replacement (HMR) functions properly</li> <li>Build performance is maintained or improved</li> <li>All tests pass with the updated build tooling</li> <li>No critical console warnings related to deprecated features</li> <li>Documentation is updated to reflect Vite 6 usage</li> </ul>"},{"location":"proposals/tech-debt/framework/","title":"Tech Debt Identification Framework","text":"<p>This document outlines the standard process for identifying, documenting, prioritizing, and addressing technical debt within the Lyzer project.</p>"},{"location":"proposals/tech-debt/framework/#1-what-is-technical-debt","title":"1. What is Technical Debt?","text":"<p>Technical debt refers to the implied cost of future rework caused by choosing expedient solutions now instead of implementing better approaches that would take longer. </p> <p>But can also include things like outdated dependencies or technologies, incomplete features, code complexity and lack of documentation, known bugs or performance issues deferred for later, and architectural limitations that impede future development.</p>"},{"location":"proposals/tech-debt/framework/#2-tech-debt-documentation-template","title":"2. Tech Debt Documentation Template","text":"<p>When documenting technical debt, please use the following template:</p> <pre><code># [Tech Debt Item Title]\n\n- Author: [Your GitHub Username]\n- Email: [Your Email, if you feel comfortable sharing it]\n- Date: [Date of identification]\n- Status: [Draft/Review/Approved/Rejected/In Progress/Done]\n- Planned: [Yes/No]\n- Milestone: [Milestone name if planned]\n\n## Summary\n\nA concise summary (2-3 sentences) of the technical debt item.\n\n## Impact Assessment\n\n- **Severity**: [Low/Medium/High/Critical]\n- **Scope**: [Localized/Component/System-wide]\n- **Risk Profile**: [Low/Medium/High] risk if not addressed\n- **Development Impact**: How it affects development velocity or quality\n- **Area**: [Frontend/Backend/Documentation/Architecture/Other]\n\n## Detailed Description\n\nA thorough explanation of the tech debt item, including:\n\n- How and why it was introduced\n- Current limitations or problems it causes\n- Code/system areas affected\n- Reproduction steps for issues (if applicable)\n- Screenshots or logs demonstrating the problem (if applicable)\n\n## Proposed Resolution\n\n- Potential approaches to resolve the debt\n- Required investigations/spikes\n- Dependencies that must be resolved first\n\n## Benefits of Resolution\n\nWhat improvements would resolving this tech debt bring?\n\n- Performance gains\n- Maintainability improvements\n- Feature enablement\n- Risk reduction\n- Developer experience improvements\n\n## Risks of Deferral\n\nWhat are the consequences of not addressing this tech debt?\n\n## Acceptance Criteria\n\nHow will we know when this tech debt has been properly addressed?\n</code></pre>"},{"location":"proposals/tech-debt/framework/#3-identification-process","title":"3. Identification Process","text":"<p>Technical debt can be identified through various channels:</p> <ol> <li>Regular Code Reviews: Team members identify tech debt during code reviews</li> <li>Performance/Security Analysis: Tools that highlight potential issues</li> <li>Developer Friction: Issues that slow down development</li> </ol>"},{"location":"proposals/tech-debt/framework/#4-prioritization-framework","title":"4. Prioritization Framework","text":"<p>Not all technical debt needs to be addressed immediately. Use this framework to prioritize:</p>"},{"location":"proposals/tech-debt/framework/#priority-levels","title":"Priority Levels","text":"<ol> <li>Critical: Blocking development, causing production issues, or creating security vulnerabilities</li> <li>High: Significantly impeding development velocity or product quality</li> <li>Medium: Causes occasional problems or will become more severe if not addressed</li> <li>Low: Minor inconvenience that has minimal impact on development or users</li> </ol>"},{"location":"proposals/tech-debt/framework/#prioritization-factors","title":"Prioritization Factors","text":"<p>Consider these factors when assigning priority:</p> <ul> <li>User experience impact</li> <li>Developer productivity impact</li> <li>Growth implications</li> <li>Risk profile</li> <li>Cost of delay</li> </ul>"},{"location":"proposals/tech-debt/framework/#5-tech-debt-resolution-process","title":"5. Tech Debt Resolution Process","text":"<ol> <li>Documentation: Create a tech debt document using the template</li> <li>Triage: Initial review by maintainers to validate and prioritize</li> <li>Planning: Include in milestone planning based on priority</li> <li>Implementation: Address according to the proposed resolution</li> <li>Verification: Confirm resolution meets acceptance criteria</li> <li>Documentation Update: Update tech debt documentation to mark as resolved</li> </ol>"},{"location":"proposals/tech-debt/framework/#6-documentation-standards","title":"6. Documentation Standards","text":""},{"location":"proposals/tech-debt/framework/#directory-structure","title":"Directory Structure","text":"<p>Place tech debt documentation in the appropriate directory:</p> <ul> <li><code>/Docs/docs/proposals/tech-debt/</code> - For tech debt documentation</li> </ul>"},{"location":"proposals/tech-debt/framework/#formatting-guidelines","title":"Formatting Guidelines","text":"<ul> <li>Use Markdown consistently</li> <li>Include a clear title (H1) at the top of each document</li> <li>Organize content with hierarchical headings (H2, H3, etc.)</li> <li>Use bulleted lists for items without specific sequence</li> <li>Include code blocks with appropriate language tags</li> <li>Add screenshots or performance metrics when applicable</li> </ul>"},{"location":"proposals/tech-debt/framework/#images-and-evidence","title":"Images and Evidence","text":"<ul> <li>Store supporting images in the <code>/Docs/docs/proposals/tech-debt/assets/</code> subdirectory</li> <li>Use descriptive filenames for images</li> <li>Include relevant metrics or benchmarks where possible</li> </ul>"},{"location":"proposals/tech-debt/framework/#example-tech-debt-document","title":"Example Tech Debt Document","text":"<p>See Example Tech Debt Document for a complete example following this framework.</p>"},{"location":"roadmap/0-1-0/","title":"Release 0.1.0","text":""},{"location":"roadmap/0-1-0/#description","title":"Description","text":"<p>Milestone</p> <p>This milestone encompasses the initial establishment of the\u00a0Lyzer project infrastructure and the development of a comprehensive Formula\u00a01 season overview page. The work spans\u00a0across repository setup, DevOps configuration, backend API development, and frontend UI implementation.</p> <p>NOTE: You might read this and think \"Wow this was definitely generated with AI\" and you'd be right. I'm not going to lie. This is just a starting point and I will be putting more effort into future milestones but for this I just wanted to summarize the project so far.</p>"},{"location":"roadmap/0-1-0/#expected-outcome","title":"Expected Outcome","text":""},{"location":"roadmap/0-1-0/#project-infrastructure","title":"Project Infrastructure","text":"<ul> <li>Complete repository setup with initial\u00a0structure and configuration</li> <li>Documentation implementation for\u00a0better project understanding</li> <li>Docker compose stack for\u00a0consistent development and deployment</li> <li>Reverse proxy configuration for proper\u00a0service routing</li> <li>Comprehensive CI/CD pipelines for testing, linting, and releases</li> </ul>"},{"location":"roadmap/0-1-0/#backend-development","title":"Backend Development","text":"<ul> <li>API endpoints delivering essential\u00a0F1 data:</li> <li>Current year\u00a0race schedule</li> <li>Driver standings</li> <li>Constructor standings</li> <li>Latest race results</li> <li>Overview page data (race weekend status, upcoming races, etc.)</li> <li>Custom exception handling for\u00a0improved error management</li> <li>Comprehensive testing and linting configuration</li> </ul>"},{"location":"roadmap/0-1-0/#frontend-implementation","title":"Frontend Implementation","text":"<ul> <li>UI theme\u00a0selection and implementation</li> <li>Navigation systems (navbar and side menu)</li> <li>Overview dashboard featuring:<ul> <li>Race\u00a0weekend status indicators</li> <li>Race weekend progress tracking</li> <li>Driver and constructor leaderboards</li> <li>Season\u00a0overview summary</li> <li>Detailed standings tables for\u00a0both drivers and constructors</li> </ul> </li> </ul>"},{"location":"roadmap/0-1-0/#impact","title":"Impact","text":"<p>This milestone establishes\u00a0the foundation for the Lyzer application\u00a0while delivering a functional overview dashboard that gives users immediate access\u00a0to the current Formula 1 season's key information.</p>"}]}